factor      : INTEGER
            | STRING
            | var
            | func_d
            | null
            | func_call
            | (PLUS | MINUS) factor
            | LPAREN expr RPAREN

term        : factor ((MUL | DIV) factor)*

expr        : term ((PLUS | MINUS) term)*

undefined   : UNDEFINED

null        : NULL

var         : ID

var_assign  : var ASSIGN expr

func_d      : FUNCTION argument_d statement_c

var_l       : var (COMMA var)*
            | EMPTY

func_call   : expr arguments

arguments   : LPAREN expr_l RPAREN

expr_l      : expr (COMMA expr)*
            | EMPTY


statement_c : LCBRACE statement_l RCBRACE

return_s    : RETURN expr
            | RETURN

statement_l : statement
            | statement_l statement

statement   : expr
            | var_assign
            | return_s
            | EMPTY
            | statement SEMI

program     : statement_l






#################################################
#################################################
#  _______  ____   _  __ ______  _   _   _____  #
# |__   __|/ __ \ | |/ /|  ____|| \ | | / ____| #
#    | |  | |  | || ' / | |__   |  \| || (___   #
#    | |  | |  | ||  <  |  __|  | . ` | \___ \  #
#    | |  | |__| || . \ | |____ | |\  | ____) | #
#    |_|   \____/ |_|\_\|______||_| \_||_____/  #
#################################################
#################################################






INTEGER     : [integer literal function]

STRING      : [string literal function: ""]

ID          : [identifier function: must start with an alphabetical char, _, but the rest can also contain numbers or $]

COMMENT     : [comment function: starts with # and continues until the end of the line]

WHITESPACE  : [whitespace function: skips spaces, tabs, and newlines until there is another character]

PLUS        : +

MINUS       : -

MUL         : *

DIV         : /

LPAREN      : (

RPAREN      : )

LCBRACE     : {

RCBRACE     : }

DOLLAR      : $

ASSIGN      : =

EQUALS      : ==

NOT_EQUALS  : !=

RABRACKET   : <

LABRACKET   : >

GRT_EQUAL   : >=

LSS_EQUAL   : <=

NOT         : !

AND         : &

OR          : |

NAND        : !&

NOR         : !|

COMMA       : ,

COLON       : :

RETURN      : return

SEMI        : ;

EMPTY       :

FUNCTION    : fun | lambda | Î»

NULL        : null