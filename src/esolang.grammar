value_base  : INTEGER
            | STRING
            | var
            | lambda
            | null
            | value_base (arguments)*
            | if_s
            | (PLUS | MINUS | NOT) value_base
            | LPAREN expr RPAREN

gt_lt_op    : value_base ((LABRACKET | RABRACKET) value_base)*

equals_op   : gl_lt_op ((EQUALS | NOT) gl_lt_op)*

binary_and  : equals_op ((AND | NAND) equals_op)*

binary_or   : binary_and ((OR | NOR) binary_and)*

term        : factor ((MUL | DIV) factor)*

expr        : term ((PLUS | MINUS) term)*

null        : NULL

var_assign  : expr ASSIGN expr //LEFT OPERAND MUST BE VAR OR MEMBER

lambda      : FUNCTION var_l block

var_l       : ID (COMMA ID)*
            | EMPTY

arguments   : LPAREN expr_l RPAREN

expr_l      : expr (COMMA expr)*
            | EMPTY

block       : LCBRACE statement_l RCBRACE
            | (COLON | ARROW_R) statement

return_s    : RETURN expr

if_s        : IF expr block (elseif_s)* (else_s)?

else_s      : ELSE block

elseif_s    : ELSEIF expr block

statement_l : statement
            | statement_l statement

statement   : expr
            | var_assign
            | return_s
            | statement SEMI*

program     : statement_l






#################################################
#################################################
#  _______  ____   _  __ ______  _   _   _____  #
# |__   __|/ __ \ | |/ /|  ____|| \ | | / ____| #
#    | |  | |  | || ' / | |__   |  \| || (___   #
#    | |  | |  | ||  <  |  __|  | . ` | \___ \  #
#    | |  | |__| || . \ | |____ | |\  | ____) | #
#    |_|   \____/ |_|\_\|______||_| \_||_____/  #
#################################################
#################################################






INTEGER     : [integer literal function]

STRING      : [string literal function: ""]

ID          : [identifier function: must start with an alphabetical char, _, but the rest can also contain numbers or $]

COMMENT     : [comment function: starts with # and continues until the end of the line]

WHITESPACE  : [whitespace function: skips spaces, tabs, and newlines until there is another character]

PLUS        : +

MINUS       : -

MUL         : *

DIV         : /

LPAREN      : (

RPAREN      : )

LCBRACE     : {

RCBRACE     : }

LSBRALCET   : [

RSBRACKET   : ]

DOLLAR      : $

ASSIGN      : =

ARROW_R     : ->

EQUALS      : ==

LABRACKET   : <

RABRACKET   : >

NOT         : not

AND         : and

OR          : or

NAND        : nand

NOR         : nor

DOT         : .

COMMA       : ,

COLON       : :

RETURN      : return

SEMI        : ;

EMPTY       :

FUNCTION    : fun | lambda | Î»

IF          : if

ELSE        : else

ELSEIF      : elseif

NULL        : null